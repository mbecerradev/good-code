Escaped mutants:
================


1) /home/martin/projects/good-code/src/Distance.php:14    [M] GreaterThanOrEqualTo

--- Original
+++ New
@@ @@
     private $meters;
     public function setMeters(float $meters) : void
     {
-        if ($meters >= 0) {
+        if ($meters > 0) {
             $sql = 'SELECT name, value FROM configuration WHERE name = "max_distance"';
             $conn = \Doctrine\DBAL\DriverManager::getConnection(array('user' => 'root', 'password' => 'examplepassword', 'host' => '127.0.0.1', 'port' => 3306, 'dbname' => 'goodcode', 'driver' => 'pdo_mysql'));
             $statement = $conn->prepare($sql);


2) /home/martin/projects/good-code/src/Distance.php:28    [M] GreaterThan

--- Original
+++ New
@@ @@
             $statement = $conn->prepare($sql);
             $statement->execute();
             $maxDistance = floatval($statement->fetchColumn(1));
-            if ($meters > $maxDistance) {
+            if ($meters >= $maxDistance) {
                 throw new AboveMaximumDistanceException("Distance is above the maximum allowed value");
             }
             $this->meters = $meters;

Timed Out mutants:
==================

Not Covered mutants:
====================


1) /home/martin/projects/good-code/src/Distance.php:20    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         if ($meters >= 0) {
             $sql = 'SELECT name, value FROM configuration WHERE name = "max_distance"';
-            $conn = \Doctrine\DBAL\DriverManager::getConnection(array('user' => 'root', 'password' => 'examplepassword', 'host' => '127.0.0.1', 'port' => 3306, 'dbname' => 'goodcode', 'driver' => 'pdo_mysql'));
+            $conn = \Doctrine\DBAL\DriverManager::getConnection(array('user' => 'root', 'password' => 'examplepassword', 'host' => '127.0.0.1', 'port' => 3305, 'dbname' => 'goodcode', 'driver' => 'pdo_mysql'));
             $statement = $conn->prepare($sql);
             $statement->execute();
             $maxDistance = floatval($statement->fetchColumn(1));


2) /home/martin/projects/good-code/src/Distance.php:20    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         if ($meters >= 0) {
             $sql = 'SELECT name, value FROM configuration WHERE name = "max_distance"';
-            $conn = \Doctrine\DBAL\DriverManager::getConnection(array('user' => 'root', 'password' => 'examplepassword', 'host' => '127.0.0.1', 'port' => 3306, 'dbname' => 'goodcode', 'driver' => 'pdo_mysql'));
+            $conn = \Doctrine\DBAL\DriverManager::getConnection(array('user' => 'root', 'password' => 'examplepassword', 'host' => '127.0.0.1', 'port' => 3307, 'dbname' => 'goodcode', 'driver' => 'pdo_mysql'));
             $statement = $conn->prepare($sql);
             $statement->execute();
             $maxDistance = floatval($statement->fetchColumn(1));


3) /home/martin/projects/good-code/src/Distance.php:29    [M] Throw_

--- Original
+++ New
@@ @@
             $statement->execute();
             $maxDistance = floatval($statement->fetchColumn(1));
             if ($meters > $maxDistance) {
-                throw new AboveMaximumDistanceException("Distance is above the maximum allowed value");
+                new AboveMaximumDistanceException("Distance is above the maximum allowed value");
             }
             $this->meters = $meters;
         } else {


4) /home/martin/projects/good-code/src/Distance.php:33    [M] Throw_

--- Original
+++ New
@@ @@
             }
             $this->meters = $meters;
         } else {
-            throw new NegativeDistanceException("Distance must be positive");
+            new NegativeDistanceException("Distance must be positive");
         }
     }
     public function meters() : float


5) /home/martin/projects/good-code/src/Distance.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->meters;
     }
-    public function add(Distance $distance) : Distance
+    protected function add(Distance $distance) : Distance
     {
         $this->meters = $this->meters() + $distance->meters();
         return $this;


6) /home/martin/projects/good-code/src/Distance.php:44    [M] Plus

--- Original
+++ New
@@ @@
     }
     public function add(Distance $distance) : Distance
     {
-        $this->meters = $this->meters() + $distance->meters();
+        $this->meters = $this->meters() - $distance->meters();
         return $this;
     }
     public function isSmall(DistanceConfiguration $config) : bool


7) /home/martin/projects/good-code/src/Distance.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->meters = $this->meters() + $distance->meters();
         return $this;
     }
-    public function isSmall(DistanceConfiguration $config) : bool
+    protected function isSmall(DistanceConfiguration $config) : bool
     {
         return $this->meters() <= $config->getSmallDistanceValue();
     }


8) /home/martin/projects/good-code/src/Distance.php:50    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     }
     public function isSmall(DistanceConfiguration $config) : bool
     {
-        return $this->meters() <= $config->getSmallDistanceValue();
+        return $this->meters() < $config->getSmallDistanceValue();
     }
     public function setMetersFromBuilding($building) : void
     {


9) /home/martin/projects/good-code/src/Distance.php:50    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     }
     public function isSmall(DistanceConfiguration $config) : bool
     {
-        return $this->meters() <= $config->getSmallDistanceValue();
+        return $this->meters() > $config->getSmallDistanceValue();
     }
     public function setMetersFromBuilding($building) : void
     {


10) /home/martin/projects/good-code/src/Distance.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->meters() <= $config->getSmallDistanceValue();
     }
-    public function setMetersFromBuilding($building) : void
+    protected function setMetersFromBuilding($building) : void
     {
         $this->setMeters($building->getMeasures()->getHeight()->toMeters());
     }
 }

11) /home/martin/projects/good-code/src/Distance.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setMetersFromBuilding($building) : void
     {
-        $this->setMeters($building->getMeasures()->getHeight()->toMeters());
+        
     }
 }
